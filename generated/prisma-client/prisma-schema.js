module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.31.1). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateFile {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type File {
  id: ID!
  state: ProcessingState!
  text: String
  uploader: User
  path: String!
  filename: String!
  duration: Float
  uploadedAt: DateTime
  mimetype: String!
  encoding: String!
  externalId: String!
  textTitle: String
  initialTranscriptionPath: String
  initialTranscription: String
}

type FileConnection {
  pageInfo: PageInfo!
  edges: [FileEdge]!
  aggregate: AggregateFile!
}

input FileCreateInput {
  id: ID
  state: ProcessingState
  text: String
  uploader: UserCreateOneWithoutFilesInput
  path: String!
  filename: String!
  duration: Float
  uploadedAt: DateTime
  mimetype: String!
  encoding: String!
  externalId: String!
  textTitle: String
  initialTranscriptionPath: String
  initialTranscription: String
}

input FileCreateManyWithoutUploaderInput {
  create: [FileCreateWithoutUploaderInput!]
  connect: [FileWhereUniqueInput!]
}

input FileCreateWithoutUploaderInput {
  id: ID
  state: ProcessingState
  text: String
  path: String!
  filename: String!
  duration: Float
  uploadedAt: DateTime
  mimetype: String!
  encoding: String!
  externalId: String!
  textTitle: String
  initialTranscriptionPath: String
  initialTranscription: String
}

type FileEdge {
  node: File!
  cursor: String!
}

enum FileOrderByInput {
  id_ASC
  id_DESC
  state_ASC
  state_DESC
  text_ASC
  text_DESC
  path_ASC
  path_DESC
  filename_ASC
  filename_DESC
  duration_ASC
  duration_DESC
  uploadedAt_ASC
  uploadedAt_DESC
  mimetype_ASC
  mimetype_DESC
  encoding_ASC
  encoding_DESC
  externalId_ASC
  externalId_DESC
  textTitle_ASC
  textTitle_DESC
  initialTranscriptionPath_ASC
  initialTranscriptionPath_DESC
  initialTranscription_ASC
  initialTranscription_DESC
}

type FilePreviousValues {
  id: ID!
  state: ProcessingState!
  text: String
  path: String!
  filename: String!
  duration: Float
  uploadedAt: DateTime
  mimetype: String!
  encoding: String!
  externalId: String!
  textTitle: String
  initialTranscriptionPath: String
  initialTranscription: String
}

input FileScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  state: ProcessingState
  state_not: ProcessingState
  state_in: [ProcessingState!]
  state_not_in: [ProcessingState!]
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  path: String
  path_not: String
  path_in: [String!]
  path_not_in: [String!]
  path_lt: String
  path_lte: String
  path_gt: String
  path_gte: String
  path_contains: String
  path_not_contains: String
  path_starts_with: String
  path_not_starts_with: String
  path_ends_with: String
  path_not_ends_with: String
  filename: String
  filename_not: String
  filename_in: [String!]
  filename_not_in: [String!]
  filename_lt: String
  filename_lte: String
  filename_gt: String
  filename_gte: String
  filename_contains: String
  filename_not_contains: String
  filename_starts_with: String
  filename_not_starts_with: String
  filename_ends_with: String
  filename_not_ends_with: String
  duration: Float
  duration_not: Float
  duration_in: [Float!]
  duration_not_in: [Float!]
  duration_lt: Float
  duration_lte: Float
  duration_gt: Float
  duration_gte: Float
  uploadedAt: DateTime
  uploadedAt_not: DateTime
  uploadedAt_in: [DateTime!]
  uploadedAt_not_in: [DateTime!]
  uploadedAt_lt: DateTime
  uploadedAt_lte: DateTime
  uploadedAt_gt: DateTime
  uploadedAt_gte: DateTime
  mimetype: String
  mimetype_not: String
  mimetype_in: [String!]
  mimetype_not_in: [String!]
  mimetype_lt: String
  mimetype_lte: String
  mimetype_gt: String
  mimetype_gte: String
  mimetype_contains: String
  mimetype_not_contains: String
  mimetype_starts_with: String
  mimetype_not_starts_with: String
  mimetype_ends_with: String
  mimetype_not_ends_with: String
  encoding: String
  encoding_not: String
  encoding_in: [String!]
  encoding_not_in: [String!]
  encoding_lt: String
  encoding_lte: String
  encoding_gt: String
  encoding_gte: String
  encoding_contains: String
  encoding_not_contains: String
  encoding_starts_with: String
  encoding_not_starts_with: String
  encoding_ends_with: String
  encoding_not_ends_with: String
  externalId: String
  externalId_not: String
  externalId_in: [String!]
  externalId_not_in: [String!]
  externalId_lt: String
  externalId_lte: String
  externalId_gt: String
  externalId_gte: String
  externalId_contains: String
  externalId_not_contains: String
  externalId_starts_with: String
  externalId_not_starts_with: String
  externalId_ends_with: String
  externalId_not_ends_with: String
  textTitle: String
  textTitle_not: String
  textTitle_in: [String!]
  textTitle_not_in: [String!]
  textTitle_lt: String
  textTitle_lte: String
  textTitle_gt: String
  textTitle_gte: String
  textTitle_contains: String
  textTitle_not_contains: String
  textTitle_starts_with: String
  textTitle_not_starts_with: String
  textTitle_ends_with: String
  textTitle_not_ends_with: String
  initialTranscriptionPath: String
  initialTranscriptionPath_not: String
  initialTranscriptionPath_in: [String!]
  initialTranscriptionPath_not_in: [String!]
  initialTranscriptionPath_lt: String
  initialTranscriptionPath_lte: String
  initialTranscriptionPath_gt: String
  initialTranscriptionPath_gte: String
  initialTranscriptionPath_contains: String
  initialTranscriptionPath_not_contains: String
  initialTranscriptionPath_starts_with: String
  initialTranscriptionPath_not_starts_with: String
  initialTranscriptionPath_ends_with: String
  initialTranscriptionPath_not_ends_with: String
  initialTranscription: String
  initialTranscription_not: String
  initialTranscription_in: [String!]
  initialTranscription_not_in: [String!]
  initialTranscription_lt: String
  initialTranscription_lte: String
  initialTranscription_gt: String
  initialTranscription_gte: String
  initialTranscription_contains: String
  initialTranscription_not_contains: String
  initialTranscription_starts_with: String
  initialTranscription_not_starts_with: String
  initialTranscription_ends_with: String
  initialTranscription_not_ends_with: String
  AND: [FileScalarWhereInput!]
  OR: [FileScalarWhereInput!]
  NOT: [FileScalarWhereInput!]
}

type FileSubscriptionPayload {
  mutation: MutationType!
  node: File
  updatedFields: [String!]
  previousValues: FilePreviousValues
}

input FileSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FileWhereInput
  AND: [FileSubscriptionWhereInput!]
  OR: [FileSubscriptionWhereInput!]
  NOT: [FileSubscriptionWhereInput!]
}

input FileUpdateInput {
  state: ProcessingState
  text: String
  uploader: UserUpdateOneWithoutFilesInput
  path: String
  filename: String
  duration: Float
  uploadedAt: DateTime
  mimetype: String
  encoding: String
  externalId: String
  textTitle: String
  initialTranscriptionPath: String
  initialTranscription: String
}

input FileUpdateManyDataInput {
  state: ProcessingState
  text: String
  path: String
  filename: String
  duration: Float
  uploadedAt: DateTime
  mimetype: String
  encoding: String
  externalId: String
  textTitle: String
  initialTranscriptionPath: String
  initialTranscription: String
}

input FileUpdateManyMutationInput {
  state: ProcessingState
  text: String
  path: String
  filename: String
  duration: Float
  uploadedAt: DateTime
  mimetype: String
  encoding: String
  externalId: String
  textTitle: String
  initialTranscriptionPath: String
  initialTranscription: String
}

input FileUpdateManyWithoutUploaderInput {
  create: [FileCreateWithoutUploaderInput!]
  delete: [FileWhereUniqueInput!]
  connect: [FileWhereUniqueInput!]
  set: [FileWhereUniqueInput!]
  disconnect: [FileWhereUniqueInput!]
  update: [FileUpdateWithWhereUniqueWithoutUploaderInput!]
  upsert: [FileUpsertWithWhereUniqueWithoutUploaderInput!]
  deleteMany: [FileScalarWhereInput!]
  updateMany: [FileUpdateManyWithWhereNestedInput!]
}

input FileUpdateManyWithWhereNestedInput {
  where: FileScalarWhereInput!
  data: FileUpdateManyDataInput!
}

input FileUpdateWithoutUploaderDataInput {
  state: ProcessingState
  text: String
  path: String
  filename: String
  duration: Float
  uploadedAt: DateTime
  mimetype: String
  encoding: String
  externalId: String
  textTitle: String
  initialTranscriptionPath: String
  initialTranscription: String
}

input FileUpdateWithWhereUniqueWithoutUploaderInput {
  where: FileWhereUniqueInput!
  data: FileUpdateWithoutUploaderDataInput!
}

input FileUpsertWithWhereUniqueWithoutUploaderInput {
  where: FileWhereUniqueInput!
  update: FileUpdateWithoutUploaderDataInput!
  create: FileCreateWithoutUploaderInput!
}

input FileWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  state: ProcessingState
  state_not: ProcessingState
  state_in: [ProcessingState!]
  state_not_in: [ProcessingState!]
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  uploader: UserWhereInput
  path: String
  path_not: String
  path_in: [String!]
  path_not_in: [String!]
  path_lt: String
  path_lte: String
  path_gt: String
  path_gte: String
  path_contains: String
  path_not_contains: String
  path_starts_with: String
  path_not_starts_with: String
  path_ends_with: String
  path_not_ends_with: String
  filename: String
  filename_not: String
  filename_in: [String!]
  filename_not_in: [String!]
  filename_lt: String
  filename_lte: String
  filename_gt: String
  filename_gte: String
  filename_contains: String
  filename_not_contains: String
  filename_starts_with: String
  filename_not_starts_with: String
  filename_ends_with: String
  filename_not_ends_with: String
  duration: Float
  duration_not: Float
  duration_in: [Float!]
  duration_not_in: [Float!]
  duration_lt: Float
  duration_lte: Float
  duration_gt: Float
  duration_gte: Float
  uploadedAt: DateTime
  uploadedAt_not: DateTime
  uploadedAt_in: [DateTime!]
  uploadedAt_not_in: [DateTime!]
  uploadedAt_lt: DateTime
  uploadedAt_lte: DateTime
  uploadedAt_gt: DateTime
  uploadedAt_gte: DateTime
  mimetype: String
  mimetype_not: String
  mimetype_in: [String!]
  mimetype_not_in: [String!]
  mimetype_lt: String
  mimetype_lte: String
  mimetype_gt: String
  mimetype_gte: String
  mimetype_contains: String
  mimetype_not_contains: String
  mimetype_starts_with: String
  mimetype_not_starts_with: String
  mimetype_ends_with: String
  mimetype_not_ends_with: String
  encoding: String
  encoding_not: String
  encoding_in: [String!]
  encoding_not_in: [String!]
  encoding_lt: String
  encoding_lte: String
  encoding_gt: String
  encoding_gte: String
  encoding_contains: String
  encoding_not_contains: String
  encoding_starts_with: String
  encoding_not_starts_with: String
  encoding_ends_with: String
  encoding_not_ends_with: String
  externalId: String
  externalId_not: String
  externalId_in: [String!]
  externalId_not_in: [String!]
  externalId_lt: String
  externalId_lte: String
  externalId_gt: String
  externalId_gte: String
  externalId_contains: String
  externalId_not_contains: String
  externalId_starts_with: String
  externalId_not_starts_with: String
  externalId_ends_with: String
  externalId_not_ends_with: String
  textTitle: String
  textTitle_not: String
  textTitle_in: [String!]
  textTitle_not_in: [String!]
  textTitle_lt: String
  textTitle_lte: String
  textTitle_gt: String
  textTitle_gte: String
  textTitle_contains: String
  textTitle_not_contains: String
  textTitle_starts_with: String
  textTitle_not_starts_with: String
  textTitle_ends_with: String
  textTitle_not_ends_with: String
  initialTranscriptionPath: String
  initialTranscriptionPath_not: String
  initialTranscriptionPath_in: [String!]
  initialTranscriptionPath_not_in: [String!]
  initialTranscriptionPath_lt: String
  initialTranscriptionPath_lte: String
  initialTranscriptionPath_gt: String
  initialTranscriptionPath_gte: String
  initialTranscriptionPath_contains: String
  initialTranscriptionPath_not_contains: String
  initialTranscriptionPath_starts_with: String
  initialTranscriptionPath_not_starts_with: String
  initialTranscriptionPath_ends_with: String
  initialTranscriptionPath_not_ends_with: String
  initialTranscription: String
  initialTranscription_not: String
  initialTranscription_in: [String!]
  initialTranscription_not_in: [String!]
  initialTranscription_lt: String
  initialTranscription_lte: String
  initialTranscription_gt: String
  initialTranscription_gte: String
  initialTranscription_contains: String
  initialTranscription_not_contains: String
  initialTranscription_starts_with: String
  initialTranscription_not_starts_with: String
  initialTranscription_ends_with: String
  initialTranscription_not_ends_with: String
  AND: [FileWhereInput!]
  OR: [FileWhereInput!]
  NOT: [FileWhereInput!]
}

input FileWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createFile(data: FileCreateInput!): File!
  updateFile(data: FileUpdateInput!, where: FileWhereUniqueInput!): File
  updateManyFiles(data: FileUpdateManyMutationInput!, where: FileWhereInput): BatchPayload!
  upsertFile(where: FileWhereUniqueInput!, create: FileCreateInput!, update: FileUpdateInput!): File!
  deleteFile(where: FileWhereUniqueInput!): File
  deleteManyFiles(where: FileWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

enum ProcessingState {
  READY
  PROCESSING_ERROR
  PROCESSING
  UPLOADED
}

type Query {
  file(where: FileWhereUniqueInput!): File
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File]!
  filesConnection(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FileConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  file(where: FileSubscriptionWhereInput): FileSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  email: String!
  name: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  email: String!
  name: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  files: FileCreateManyWithoutUploaderInput
}

input UserCreateOneWithoutFilesInput {
  create: UserCreateWithoutFilesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutFilesInput {
  id: ID
  email: String!
  name: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  name_ASC
  name_DESC
  password_ASC
  password_DESC
  resetToken_ASC
  resetToken_DESC
  resetTokenExpiry_ASC
  resetTokenExpiry_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  name: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  email: String
  name: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  files: FileUpdateManyWithoutUploaderInput
}

input UserUpdateManyMutationInput {
  email: String
  name: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
}

input UserUpdateOneWithoutFilesInput {
  create: UserCreateWithoutFilesInput
  update: UserUpdateWithoutFilesDataInput
  upsert: UserUpsertWithoutFilesInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutFilesDataInput {
  email: String
  name: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
}

input UserUpsertWithoutFilesInput {
  update: UserUpdateWithoutFilesDataInput!
  create: UserCreateWithoutFilesInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  resetToken: String
  resetToken_not: String
  resetToken_in: [String!]
  resetToken_not_in: [String!]
  resetToken_lt: String
  resetToken_lte: String
  resetToken_gt: String
  resetToken_gte: String
  resetToken_contains: String
  resetToken_not_contains: String
  resetToken_starts_with: String
  resetToken_not_starts_with: String
  resetToken_ends_with: String
  resetToken_not_ends_with: String
  resetTokenExpiry: Float
  resetTokenExpiry_not: Float
  resetTokenExpiry_in: [Float!]
  resetTokenExpiry_not_in: [Float!]
  resetTokenExpiry_lt: Float
  resetTokenExpiry_lte: Float
  resetTokenExpiry_gt: Float
  resetTokenExpiry_gte: Float
  files_every: FileWhereInput
  files_some: FileWhereInput
  files_none: FileWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    